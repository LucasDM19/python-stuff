
def main():
    print "Rode os testes!"

"""
   If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
   Find the sum of all the multiples of 3 or 5 below 1000.
"""
def problem1(lastNumber):
   return sum([x for x in range(1,lastNumber) if (x % 3 == 0 or x % 5 == 0)])

"""
   Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
def problem2(max_number): #find the sum of the even-valued terms, given some number
   return sum([fibonacci(x) for x in range(1,100) if (fibonacci(x) < max_number and fibonacci(x) % 2 == 1)])
   #return [fibonacci(x) for x in range(100) if (fibonacci(x) < max_number and x % 2 == 1)]

#Memoize is a decorator for the fibonacci function.
#its kind if cache. (as seen on http://ujihisa.blogspot.com.br/2010/11/memoized-recursive-fibonacci-in-python.html)
def memoize(f):
    cache = {}
    return lambda *args: cache[args] if args in cache else cache.update({args: f(*args)}) or cache[args]

@memoize   
def fibonacci(number):
   if number < 2:
      return number
   return fibonacci(number-1) + fibonacci(number-2)
   
"""
   The prime factors of 13195 are 5, 7, 13 and 29.
   What is the largest prime factor of the number 600851475143 ?
"""
def problem3(number):
   #print max(prime_factors(number))
   return max(prime_factors(number))

# as seen on http://stackoverflow.com/questions/9816603/range-is-too-large-python
def prime_factors(x):
    factors = []
    while x % 2 == 0:
        factors.append(2)
        x /= 2
    i = 3
    while i * i <= x:
        while x % i == 0:
            x /= i
            factors.append(i)
        i += 2
    if x > 1:
        factors.append(x)
    return factors
      
#Return a list of numbers up to the max_number
def sieveOfEratosthenes(max_number):
   import math
   checkUntil = int(math.sqrt(max_number))+1
   listOfNumbers = xrange(2,max_number)
   for i in range(2,checkUntil):
      listOfNumbers = [number for number in listOfNumbers if (number % i != 0 or number <= i )]
      #print i, listOfNumbers
   return listOfNumbers

#Warning: this does not work when using big numbers as input
def primeFactors(number):
   return [i for i in sieveOfEratosthenes(number) if number % i == 0]

"""
   A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
   Find the largest palindrome made from the product of two 3-digit numbers.
"""
def problem4(digit_number):
   #print max([number1*number2 for number1 in range(10 ** (digit_number),0,-1) for number2 in range(10 ** (digit_number),0,-1) if isPalindromicNumber(number1*number2) == True])
   return max([number1*number2 for number1 in range(10 ** (digit_number),0,-1) for number2 in range(10 ** (digit_number),0,-1) if isPalindromicNumber(number1*number2) == True])

#Returns True if some number is palindromic
def isPalindromicNumber(number):
   n1 = number
   n2=0
   while n1 >= 10 :
      n2=n2*10+(n1%10)
      n1=n1/10
   n2=n2*10+(n1%10)
   if n2-number==0: return True
   return False
   #print n2,number, n2-number

#Modo que compara como string. antigo e lento.
def isPalindromicNumberVeryVerySlow(number):
   from math import log
   number_length = len(str(number))
   for i in range( number_length/2 ):
      if str(number)[i] != str(number)[number_length-i-1] : return False
   return True
   
"""
   2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
   What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""
def problem5(max_number):
   return mmc(range(1,max_number+1))
   
#Calcula o MDC entre dois numeros.
def mdc(a,b):
	if b == 0:
		return a
	return mdc(b, a%b)
	
#Calcula o MMC de dois numeros. Se baseia na relacao dessa operacao com o MDC.
def mmc2(a,b):
	return abs(a*b)/mdc(a,b)
	
#Calculo o MMC de uma lista de numeros. Apenas expande a mesma operacao, de forma cumulativa, para cada item.
def mmc(numeros):
	temp = 2
	for i in range(len(numeros)):
		temp = mmc2(temp,numeros[i])
	return temp
   
#Modo como estava antes. Atualizei.
def problem5_old(max_number):
   return 2520
   candidate = max_number
   foundNumber = False
   while not foundNumber:
      foundNumber = True
      for number in range(2,max_number):
         if candidate % number != 0 : 
            foundNumber = False
            break
      print candidate
      candidate += 1
   return min(candidates)

#Acabou que eu nem precisei de usar isso.
def factorial(n):
    """returns the factorial of n"""
    if n == 0:
        return 1
    else:
        k = n * factorial(n-1)
        return k
   
"""
#Minimo Multiplo Comum, para dois numeros dados
def MMC(a, b):
   return 0
   
#Maximo Divisor Comum, para dois numeros dados
def MDC():
   return 0
"""

"""
   The sum of the squares of the first ten natural numbers is, 1*1 + 2*2 + ... + 10*10 = 385
   The square of the sum of the first ten natural numbers is,   (1 + 2 + ... + 10)2 = 552 = 3025
   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
   3025 − 385 = 2640.
   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""
def problem6(max_number):
   return squares_of_sum(max_number) - sum_of_squares(max_number)

#sum of the squares of the first <max_number> natural numbers
def sum_of_squares(max_number):
   return sum(n*n for n in range(1,max_number+1))
   
#square of the sum of the first <max_number> natural numbers 
def squares_of_sum(max_number):
   return ( sum(n for n in range(1,max_number+1)) * sum(n for n in range(1,max_number+1)) )

"""
   By listing the first six prime numbers 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
   What is the 10.001st prime number?
"""
def problem7(nth_prime):
   primos=[]
   n=2
   while len(primos) < nth_prime:
      num_mag=(n)**0.5
      if (len(primos)==0):
         primos.append(n)
      #elif( len([p for p in primos if n % p == 0])==0 ): #Sem multiplos
         #primos.append(n)
      ehPrimo=True
      for p in primos :
         if n%p == 0:  #Possui algum multiplo - interrompe na hora
            ehPrimo=False
            break
         if p > int(n**0.5): #Verificou mais da raiz quadrada - nao tem mais multiplos possiveis
            ehPrimo=True
            break
      if ehPrimo :
         primos.append(n)
      #print len(primos),  n, primos[-1]
      n=n+1
   return primos[-1]

"""
   The four adjacent digits in the 1000-digit number that have the greatest product are
   9 x 9 x 8 x 9 = 5832
   73167176531330624919225119674426574742355349194934
   96983520312774506326239578318016984801869478851843
   85861560789112949495459501737958331952853208805511
   12540698747158523863050715693290963295227443043557
   66896648950445244523161731856403098711121722383113
   62229893423380308135336276614282806444486645238749
   30358907296290491560440772390713810515859307960866
   70172427121883998797908792274921901699720888093776
   65727333001053367881220235421809751254540594752243
   52584907711670556013604839586446706324415722155397
   53697817977846174064955149290862569321978468622482
   83972241375657056057490261407972968652414535100474
   82166370484403199890008895243450658541227588666881
   16427171479924442928230863465674813919123162824586
   17866458359124566529476545682848912883142607690042
   24219022671055626321111109370544217506941658960408
   07198403850962455444362981230987879927244284909188
   84580156166097919133875499200524063689912560717606
   05886116467109405077541002256983155200055935729725
   71636269561882670428252483600823257530420752963450
   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
   What is the value of this product?
"""
def problem8(hugeMotherfuckerNumber, n_digits):
   max_product = 1
   for i in range(0,len(hugeMotherfuckerNumber)-n_digits+1 ):
      #print hugeMotherfuckerNumber[i:i+n_digits]
      prod=1
      for x in range(n_digits):
         #print hugeMotherfuckerNumber[i+x:i+x+1]
         prod = prod * int(hugeMotherfuckerNumber[i+x:i+x+1])
      if prod > max_product:
         max_product = prod
         #print prod
   return max_product
   
"""
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""
# Como visto em: https://en.wikipedia.org/wiki/Pythagorean_triple#Generating_a_triple
# Euclid's formula is a fundamental formula for generating Pythagorean triples given an arbitrary pair of integers m and n with m > n > 0. The formula states that the integers
#a = m2 - n2
#b = 2mn
#c = m2 + n2
def generatePitagoreanTriple(m, n):
   if m <= n : return (-1, -1, -1) #if m <= n : raise ValueError('m deve ser maior do que n.')
   if(m <= 0) or (n <= 0) : return (-1, -1, -1) #if (m <= 0) or (n <= 0) : raise ValueError('m e n devem ser maiores do que zero.')
   a = m*m - n*n
   b = 2*m*n
   c = m*m + n*n
   return (a, b, c)
   
def problem9(valueOfABC, maxTry=500):
   for m in range(-1, maxTry):
      for n in range(1, m):
         (a, b, c) = generatePitagoreanTriple(m, n)
         if a+b+c == valueOfABC:
            return (a, b, c, a*b*c)

if __name__ == '__main__':
    main()